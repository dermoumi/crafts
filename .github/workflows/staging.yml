name: Staging

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  lint:
    name: Lint files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Lint
        run: pnpm lint

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Test code
        run: pnpm test:cov

      - name: Check if can publish code coverage
        id: check_codecov
        run: |
          if [ "$CODECOV_TOKEN" == "" ]; then
            echo "publish_codecov=0" >> $GITHUB_OUTPUT
          else
            echo "publish_codecov=1" >> $GITHUB_OUTPUT
          fi
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Publish code coverage
        if: (steps.check_codecov.outputs.publish_codecov == '1')
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    name: Publish to CF pages
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    environment:
      name: Staging
      url: ${{ steps.publish-client.outputs.url }}
    outputs:
      url: ${{ steps.publish-client.outputs.url }}
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Build
        run: pnpm build

      - name: Check if can publish to cloudflare
        id: check_cf_pages
        run: |
          if [ "$CLOUDFLARE_API_TOKEN" == "" ] \
          || [ "$CLOUDFLARE_ACCOUNT_ID" == "" ] \
          || [ "$CLOUDFLARE_PAGES_PROJECT" == "" ]; then
            echo "publish_cf_pages=0" >> $GITHUB_OUTPUT
          else
            echo "publish_cf_pages=1" >> $GITHUB_OUTPUT
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_PAGES_PROJECT: ${{ env.CLOUDFLARE_PAGES_PROJECT }}

      - name: Publish client to cloudflare
        if: (steps.check_cf_pages.outputs.publish_cf_pages == '1')
        id: publish-client
        working-directory: apps/client/
        run: |
          if [[ "${{ github.ref }}" =~ refs/pull/.+ ]]; then
            # Pull requests deploy to their own staging environments
            : "${{ github.ref }}"
            : ${_%%\/merge}  # Remove 'merge' at the end
            : ${_//refs\/pull\/}  # Remove 'refs' at the beginning
            TARGET="PR-${_}"
          else
            TARGET="${{ github.ref_name }}"
          fi

          # Use wrangler to manually deploy to cloudflare
          pnpm dlx wrangler pages publish www/ \
            --project-name=$CF_PAGES_PROJECT \
            --branch="$TARGET" \
            --commit-dirty=true | tee w.out

          # Parse the output URL from the wrangler output
          TARGET_URL=$(grep -oE "https?://.+\.pages\.dev" w.out | tail -n1)
          if [[ "$TARGET_URL" ]]; then
            echo "::set-output name=url::$TARGET_URL"
          else
            echo "Failed to find URL for deployment"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_PAGES_PROJECT: ${{ env.CLOUDFLARE_PAGES_PROJECT }}
